# generated by patch-package 6.4.14
#
# declared package:
#   @mikro-orm/core: 5.4.2
#
diff --git a/node_modules/@mikro-orm/core/utils/EntityComparator.js b/node_modules/@mikro-orm/core/utils/EntityComparator.js
index 528e10a..cb3620e 100644
--- a/node_modules/@mikro-orm/core/utils/EntityComparator.js
+++ b/node_modules/@mikro-orm/core/utils/EntityComparator.js
@@ -265,7 +265,7 @@ class EntityComparator {
             ret += ` && entity${entityKey} != null`;
         }
         if (isRef) {
-            ret += ` && (entity${entityKey} == null || entity${entityKey}.__helper?.hasPrimaryKey())`;
+            ret += ` && (entity${entityKey} == null || (entity${entityKey}.__helper ? entity${entityKey}.__helper.hasPrimaryKey() : undefined))`;ret += ` && (entity${entityKey} == null || entity${entityKey}.__helper?.hasPrimaryKey())`;
         }
         return ret;
     }
@@ -436,7 +436,7 @@ class EntityComparator {
             // We might be comparing PK to object, in case we compare with cached data of populated entity
             // in such case we just ignore the comparison and fallback to `equals()` (which will still mark
             // it as not equal as we compare PK to plain object).
-            const cond = `last${this.wrap(prop.name)}.toHexString?.() !== current${this.wrap(prop.name)}.toHexString?.()`;
+            const cond = `last${this.wrap(prop.name)}.toHexString ? last${this.wrap(prop.name)}.toHexString() : undefined !== current${this.wrap(prop.name)}.toHexString ? current${this.wrap(prop.name)}.toHexString() : undefined`;
             return this.getGenericComparator(this.wrap(prop.name), cond);
         }
         return `  if (!equals(last${this.wrap(prop.name)}, current${this.wrap(prop.name)})) diff${this.wrap(prop.name)} = current${this.wrap(prop.name)};`;
diff --git a/node_modules/@mikro-orm/core/utils/Utils.js b/node_modules/@mikro-orm/core/utils/Utils.js
index c19659e..f61dc3f 100644
--- a/node_modules/@mikro-orm/core/utils/Utils.js
+++ b/node_modules/@mikro-orm/core/utils/Utils.js
@@ -343,6 +343,8 @@ class Utils {
      * Extracts primary key from `data`. Accepts objects or primary keys directly.
      */
     static extractPK(data, meta, strict = false) {
+        if (!data) return null;
+
         if (Utils.isPrimaryKey(data)) {
             return data;
         }
